
## Selection Sort ##

    for i from 0 to n-1
        find smallest item between i'th item and last item
        swap smallest item with i'th item

Complexity :
    n + (n-1) + (n-2) + ... + 1
    n(n + 1) / 2
    (n^2 + n) / 2
    n^2/2 + n/2 <- Total # of steps.

Big O : O(n^2)
    -This is because it describes the
    -running time in an order of magnitude
    -as thats the most dominating number.

Omega : O(n^2)
    -This is due to needing to compare every number
    -on every iteration.



## Bubble Sort ##

    Repeat n-1 times
        for i from 0 to n-2 <- total # of n-1 comparisons
            If i'th and i'th+1 elements out of order
                swap them
        if no swaps
            quit

    -Next largest value goes to the end on every iteration.
    -While also slowly pushing smaller values to the beginning.

Complexity :
    (n - 1) * (n - 1)
    n^2 - 1n - 1n + 1
    n^2 -2n + 1

Big O : O(n^2)
    -This is due to needing to loop over the loop
    -repeatedely to find the smallest number - n times

Omega Notation : O(n)
    -This is because if it gets sorted after the first run
    -it will know that its already sorted.



## RECURSION ##

    When a function/method calls itself.

Phonebook pseudo code example :
    pick up phone book
    open to middle
    look at page
    if person is on page
        call person
    else if person is earlier n book
        search left half of book
    else if person is later in book
        search right half of book
    else
        quit



## MERGE SORT ##

    If only one value
        Quit
    Else (Keeps separating until one value, which meets above condition)
-       Sort the left half of values
-       Sort the right half of value
-       Merge the two together(compares two values using above condition)

    *The act of halving is logarithmic. (At base 2)

Big O : (n log n)
    -It checks every value (n) at least once.
    -Halves the remaining values (log)
    -Checks remaining values and repeats (n)

Omega Notation : (n log n)

Theta Notation of (n log n)

## TERMS ##

Asymptodically similar :
    The upper bound is the same complexity/same, so they "may as well be the same".

Theta Notation :
    When the time complexity of the upper bound (Big O) and the lower bound (Omega N) are the same,
    it's referred to as: "Merger sort is in Theta of n log n."